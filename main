#!/bin/bash
#PBS -l nodes=1:ppn=8,walltime=9:00:00,vmem=14gb
#PBS -N fmriprep

set -x
set -e

bl2bids

#####################################################################################
#####################################################################################
#write out *plugin* configuration for fmriprep to limit mem/cpus
#this can't prevent the fmriprep/nipype bootup vmem spiking (could kill the job)
#but it seems to help...
cat <<EOF > multi_proc.yml
plugin: LegacyMultiProc
plugin_args: {maxtasksperchild: 1, memory_gb: 14, n_procs: 8, raise_insufficient: false}
EOF

#source bids_funcs.sh

WORKDIRNAME=fmripworkdir
outdir=fmripout
#INDIRNAME=fmripinput

inT1w=`jq -r '.t1' config.json`
inT2w=`jq -r '.t2' config.json`
inFMRI=`jq -r '.fmri' config.json`
inFSDIR=`jq -r '.fsin' config.json`

space=$(jq -r .space config.json)

output_space=$space
cifti_output_resolution="91k" #could be 170k-higher resolution CIFTI output (170494 grayordinates @ 1.6mm).

#for volume output
resolution=$(jq -r .resolution config.json)
if [ $resolution != "original" ] && [ $resolution != "null" ] ;then
    output_space=$space:$resolution
fi

#####################################################################################
#####################################################################################
# some logical checks
if [[ $inT1w = "null" ]] || [[ $inFMRI = "null" ]] ; then
	echo "app needs minimally a T1w and fmri. exiting"
	exit 1
fi

# extract info from brainlife interface, base on T1w
# get the staging dir, this is where meta information is 
stagingDir=$(dirname $inT1w)
echo "ls dir where initial bl info read--> $stagingDir"
ls -dl $stagingDir

if [[ $stagingDir = "." ]]; then
   echo "error finding staging directory. exiting"
   exit 1
fi

#####################################################################################
#####################################################################################
# setup bids dir structure

# remove if stuff already exists
rm -rf $WORKDIRNAME && mkdir -p $WORKDIRNAME
rm -rf $outdir && mkdir -p $outdir

# if freesurfer provided, copy it to the same level as output dir
# TODO why can't we just symlink this in?
if [[ $inFSDIR != "null" ]] ; then
    mkdir -p $outdir/freesurfer
    #TODO - strip alphanumeric chars?
    sub=$(jq -r '._inputs[] | select(.id == "t1w") | .meta.subject' config.json)
    cp -r $inFSDIR $outdir/freesurfer/sub-$sub
    chmod -R +rw $outdir/freesurfer
fi

# avoid templateflow problems on HPC's running singularity
mkdir -p templateflow
export SINGULARITYENV_TEMPLATEFLOW_HOME=$PWD/templateflow

# set FreeSurfer
[ -z "$FREESURFER_LICENSE" ] && echo "Please set FREESURFER_LICENSE in .bashrc" && exit 1;
echo $FREESURFER_LICENSE > license.txt

# TODO - I shouldn't set cifti-output if it's running in volume mode?

time singularity exec -e \
    docker://nipreps/fmriprep:20.2.1 \
    /usr/local/miniconda/bin/fmriprep \
    --notrack \
    --resource-monitor \
    --md-only-boilerplate \
    --stop-on-first-crash \
    --use-plugin=multi_proc.yml \
    --output-spaces $output_space MNI152NLin2009cAsym \
    --cifti-output $cifti_output_resolution \
    --force-bbr \
    --use-syn-sdc \
    --skull-strip-template=NKI \
    --work-dir=$WORKDIRNAME \
    --fs-license-file=license.txt \
    bids $outdir participant

#--skip-bids-validation \

echo "done with fmriprep! - now organizing output"

#####################################################################################
# reogranize output for brainlife 
#####################################################################################

# get basename for fmri output
sub=$(jq -r '._inputs[] | select(.id == "fmri") | .meta.subject' config.json)
oDir=$outdir/fmriprep/sub-$sub
ses=$(jq -r '._inputs[] | select(.id == "fmri") | .meta.session' config.json)
[ "$ses" != "null" ] && oDir=$oDir/ses-$ses

mkdir -p regress
regressors_tsv=`find $oDir/func/*_desc-confounds_timeseries.tsv`
[[ -f $regressors_tsv ]] && cp $regressors_tsv regress/regressors.tsv
regressors_json=`find $oDir/func/*_desc-confounds_timeseries.json`
[[ -f $regressors_json ]] && cp $regressors_json regress/regressors.json

# need to check if we have surface or volume output,
# this will match for fsaverage, fsaverage5, ...
product=""
if [[ $space =~ 'fsaverage' ]] || [[ $space == 'fsnative' ]] ; then
    # for surface/data
    mkdir -p surface-data
    ln -sf ../$(find $oDir/func/*_space-${space}_hemi-L_bold.func.gii) surface-data/left.gii
    ln -sf ../$(find $oDir/func/*_space-${space}_hemi-R_bold.func.gii) surface-data/right.gii
    product="\"surface-data\": { \"meta\": { \"space\": \"$space\" }, \"tags\": [ \"space-$space\"] }, $product"

    # for surface/vertices (we only need this for fsnative)
    mkdir -p surface-vertices/right surface-vertices/left
    time singularity exec -e -B `pwd`/license.txt:/usr/local/freesurfer/license.txt \
        docker://brainlife/freesurfer_on_mcr:6.0.0 \
        ./convertsurf.sh fmripout/freesurfer/sub-$sub/surf
    product="\"surface-vertices\": { \"meta\": { \"space\": \"$space\" }, \"tags\": [ \"space-$space\"] }, $product"

    # cifti output 
    mkdir -p cifti
    ln -sf ../$(find $oDir/func/*_bold.dtseries.nii) cifti/cifti.nii
    cifti_json=$(cat $oDir/func/*_bold.dtseries.json)
    product="\"cifti\": { \"meta\": $cifti_json }, $product"

    # for parcellation/surface-deprecated
    #mkdir -p surface
    #ln -sf ../$(find $oDir/func/*_space-${space}_hemi-L_bold.func.gii) surface/left_data.gii
    #ln -sf ../$(find $oDir/func/*_space-${space}_hemi-R_bold.func.gii) surface/right_data.gii
    #if [[ $space =~ 'fsaverage' ]] ; then
    #    product="\"surface\": { \"meta\": { \"space\": \"$space\" }, \"tags\": [ \"space-$space\"] }, $product"
    #fi
    #if [[ $space == 'fsnative' ]] ; then
    #    #convert some freesurfer surfaces to gii
    #    product="\"surface\": { \"meta\": { \"space\": \"native\" }, \"tag\": [ \"space-native\" ] }, $product"
    #fi

else # else its a volume(bold) output
    product="\"bold_img\": {\"meta\": {\"space\": \"$space\"}, \"tags\": [ \"space-$space\" ]}, $product"

    # get the preproc fmri vol
    mkdir -p bold_img
    ln -sf ../$(find $oDir/func/*_space-${space}_desc-preproc_bold.nii.gz) bold_img/bold.nii.gz

    # get the preproc fmri volmask
    mkdir -p bold_mask
    ln -sf ../$(find $oDir/func/*_space-${space}_desc-brain_mask.nii.gz) bold_mask/mask.nii.gz
fi

### T1w outputs (subject space) ###
#there are t1w output for each output space, so we can't use wilcard
# TODO - should we output all output spaces?
mkdir -p anat anat_mask
sub=$(jq -r '._inputs[] | select(.id == "t1w") | .meta.subject' config.json)
oDir=$outdir/fmriprep/sub-$sub
ses=$(jq -r '._inputs[] | select(.id == "t1w") | .meta.session' config.json)
[ "$ses" != "null" ] && oDir=$oDir/ses-$ses
#this doesn't handle run..
#ln -sf ../$oDir/anat/sub-${sub}_ses-${ses}_desc-preproc_T1w.nii.gz anat/t1.nii.gz
ln -sf ../$oDir/anat/*_desc-preproc_T1w.nii.gz anat/t1.nii.gz
anat_json=$(cat $oDir/anat/*_desc_preproc_T1w.json)
product="\"anat\": {\"meta\": $anat_json }, $product"
#ln -sf ../$oDir/anat/sub-${sub}_ses-${ses}_desc-brain_mask.nii.gz anat_mask/mask.nii.gz
ln -sf ../$oDir/anat/*_desc-brain_mask.nii.gz anat_mask/mask.nii.gz
anat_mask_json=$(cat $oDir/anat/*_desc_brain_mask.json)
product="\"anat\": {\"meta\": $anat_json }, $product"

##################
### reportlets ###
##################

rm -rf output_report #in case it's already there
mkdir -p output_report
for html in $(cd $outdir && find ./ -name "*.html"); do
    mkdir -p output_report/$(dirname $html)
    cp $outdir/$html output_report/$html
done

for dir in $(cd $outdir && find ./ -name figures); do
    mkdir -p output_report/$(dirname $dir)
    cp -r $outdir/$dir output_report/$(dirname $dir)
done

#rename the parent directory to confirm to brainlife html output
mv output_report/fmriprep output_report/html 

cat << EOF > product.json
{
    $product
    "brainlife": [
        {
            "type": "html",
            "name": "fmriprep report (todo)",
            "desc": "we could show the content of the html report here",
            "path": "output_report"
        }
    ]
}
EOF

#####################################################################################
#####################################################################################

# save lots of space
rm -r $WORKDIRNAME

echo "all done"

